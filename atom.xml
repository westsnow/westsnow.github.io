<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog of Westsnow]]></title>
  <link href="http://westsnow.github.io/atom.xml" rel="self"/>
  <link href="http://westsnow.github.io/"/>
  <updated>2015-01-14T16:51:04-05:00</updated>
  <id>http://westsnow.github.io/</id>
  <author>
    <name><![CDATA[shuai.wu]]></name>
    <email><![CDATA[hbwestsnow@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Brief Introduction to Oracle.]]></title>
    <link href="http://westsnow.github.io/blog/2015/01/14/get-used-to-oracle-environment/"/>
    <updated>2015-01-14T15:30:47-05:00</updated>
    <id>http://westsnow.github.io/blog/2015/01/14/get-used-to-oracle-environment</id>
    <content type="html"><![CDATA[<p>this article is about how to connect to Oracle database and get a brief idea of how to use it.</p>

<h2>how to connect</h2>

<p>Suppose you have already registered an oracle account.</p>

<p>First, connect to cise machine: open your terminal input &ldquo;ssh username:thunder.cise.ufl.edu&rdquo;</p>

<p>then input your cise password.</p>

<h2>how to enter oracle database</h2>

<p>Once logged in, you can enter the SQL terminal and try some sql commands.</p>

<p>Inorder to use sqlPlus command in current context, we need first import a file</p>

<blockquote><p>source /usr/local/etc/ora11.csh</p></blockquote>

<p>Then log into the oracle server</p>

<blockquote><p>sqlplus username@orcl</p></blockquote>

<p>Here username is your oracle account username and orcl is the schema you wanna use.</p>

<p>We have no choice but use &ldquo;orcl&rdquo; since this is the only schema in this database.</p>

<h2>try sql commands</h2>

<p>There are lots of sql commands built in oracle. Since this is also my first time to use oracle, I&rsquo;ll list some common commands I have tried.</p>

<p>1</p>

<blockquote><p>select owner, table_name from all_tables;</p></blockquote>

<p>will list all the tables in this schema but you dont have access to them.</p>

<p>2</p>

<blockquote><p>select table_name from user_tables;</p></blockquote>

<p>will list tables you created. Initially, it&rsquo;s empty.</p>

<p>3</p>

<blockquote><p>create table my_table(</p>

<p> id varchar(16),</p>

<p> name varchar(16),</p>

<p>primary key (id)</p>

<p>);</p></blockquote>

<p>will create a simple table named my_table.</p>

<p>4</p>

<blockquote><p>insert into my_table values (&lsquo;007&rsquo;,&lsquo;westsnow&rsquo;);</p></blockquote>

<p>5</p>

<blockquote><p>select * from my_table;</p>

<h2>have fun</h2>

<p>to be continued.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Implementation]]></title>
    <link href="http://westsnow.github.io/blog/2015/01/13/database-implementation/"/>
    <updated>2015-01-13T19:39:43-05:00</updated>
    <id>http://westsnow.github.io/blog/2015/01/13/database-implementation</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>At this semester, I&rsquo;ll implement my own database in C++.</p>

<p>to be continued.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Simulator]]></title>
    <link href="http://westsnow.github.io/blog/2014/12/18/twitter-simulator/"/>
    <updated>2014-12-18T15:01:00-05:00</updated>
    <id>http://westsnow.github.io/blog/2014/12/18/twitter-simulator</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is a extension of the previous version.</p>

<p>In this version, I implemented a CentralServer, a RestServer and ClientSimulator, using scala, akka and spray.</p>

<ul>
<li>CentralServer: communicate with RestServer, using akka&#8217; actor model.</li>
<li>RestServer: receive HTTP requests from clients and transfer these requests into akka&rsquo;s message and forward to CentralServer. Then the
response from CentralServer is packaged into json format message as a response to clients</li>
<li>ClientSimulator: starts many clients that simulate the behavior of real world twitter users, who frequently send requests(like post twitters, follow friends, refresh homepage, etc) to RestServer. Using this ClientSimulator,
I can test the RestServer and CentralServer&rsquo;s message handling capability.</li>
</ul>


<h2>Envonriment</h2>

<p>64-core Large Machine Cluster.</p>

<h2>Result</h2>

<ul>
<li>RestServer can handle nearly 6000 requests/second from clients on average(2000 POST request/second and 4000 GET request/second).</li>
<li>The bottleneck is RestServer&rsquo;s capability(6000 requests/second on average). As I increase the number of RestServers, the centralServer are always working well(the CentralServer can at least handle 24000 requests/second without any problem since I started at most 4 RestServers).</li>
<li>RestServers are working totally independently. As I increase the number of RestServer and Clients, the requests each RestServer can handle is still about 6000/second.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter APIs]]></title>
    <link href="http://westsnow.github.io/blog/2014/12/16/twitter-apis/"/>
    <updated>2014-12-16T15:15:48-05:00</updated>
    <id>http://westsnow.github.io/blog/2014/12/16/twitter-apis</id>
    <content type="html"><![CDATA[<h3>1. post a twitter, Example</h3>

<blockquote><p>get localhost:8080/statuses/update?userId=12&amp;content=I_love_twitter</p></blockquote>

<h3>2. show users&#8217; timeline(homepage)</h3>

<blockquote><p>get localhost:8080/statuses/user_timeline?userId=1434&amp;num=5</p>

<p>this requests 5 new twitters of user(1434)&rsquo;s timeline</p></blockquote>

<h3>3. find out followers</h3>

<blockquote><p>post localhost:8080/followers/ids?userId=3428
this requests the list of user 3428&rsquo;s followers</p></blockquote>

<h3>4. follow someone</h3>

<blockquote><p>post localhost:8080/friendships/create?userId=1434&amp;followingId=3428
userId will become a follower of followingId</p></blockquote>

<h3>5. delete a twitter</h3>

<blockquote><p>post localhost:8080/statuses/destroy?userId=1434&amp;twitterId=5467
user 1434 will delete its twitter 5467</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DOS Project]]></title>
    <link href="http://westsnow.github.io/blog/2014/09/19/Bitcoin-Miner/"/>
    <updated>2014-09-19T16:10:01-04:00</updated>
    <id>http://westsnow.github.io/blog/2014/09/19/Bitcoin-Miner</id>
    <content type="html"><![CDATA[<h2>BitCoin-Mining</h2>

<p> my project, I finally generate two jars, bitcoinServer.jar and bitcoinClient.jar.</p>

<p>To run bitcoinServer.jar, there are two parameters: numberOfZeros, and runtime. For example: &ldquo;java -jar bitcoinServer.jar 6 100&rdquo; will ask the server to
calculate bitcoins start with &ldquo;000000&rdquo; and run for 100 seconds.(the default numberOfZeros is 5 the runtim time is 30 seconds)</p>

<p>To run bitcoinClient.jar, there is one parameter, ie, the server&rsquo;s ip.</p>

<p><em>The source code can be found <a href="https://github.com/westsnow/BitCoin-Mining">from my github</a></em></p>

<h3>1. size of work unit.</h3>

<p>When a worker is connected to server, the server will give the worker a preFix String like &ldquo;shuai.wu0001&rdquo;,&ldquo;shuai.wu0002&rdquo;.
&ldquo;shuai.wu&rdquo; is my gatorlink id, which is the prefix string of every client. And ths substring after &ldquo;shuai.wu&rdquo; is unique for every client.</p>

<p>After the client get its own prefix string, it just generate its own strings, like &ldquo;abcd&rdquo;, and get the final string &ldquo;shuai.wu0001abcd&rdquo;.
Then the client use SHA256 to calculate the hashvalue, if the hash value is started with certain number of zeros, send the result to the server.</p>

<p>With this method, the work unit the server give its works is in fact infinite. And the workers&#8217; won&rsquo;t calculate same strings. And the server don&rsquo;t even have to consider how to assagin work unit to clients frequently, just knowing that as long as the worker gets a result, it will receive it.</p>

<h3>2.The result of running your program for &ldquo;java -jar bitcoinServer 4 10&rdquo;:</h3>

<h4>2.1 The environment:</h4>

<blockquote><p>server:               lin116-09.cise.ufl.edu</p>

<p>cpu info:</p>

<p>architecture:           x86_64</p>

<p>CPU op-mode(s):        32-bit, 64-bit</p>

<p>Byte Order:            Little Endian</p>

<p>CPU(s):                8</p>

<p>On-line CPU(s) list:   0-7</p>

<p>Thread(s) per core:    2</p>

<p>Core(s) per socket:    4</p></blockquote>

<h4>2.2 The result of running bitcoinServer.jar (the server itself is also a client machine):</h4>

<blockquote><p>java -jar bitcoinServer.jar 4 30</p>

<p>&hellip;&hellip;</p>

<p>shuai.wu0001kjFr   00008bb045aa31d3bb7d76ff48c1fcfa1ccbf43f493a78d66b740393d0a1f2d2</p>

<p>shuai.wu0003m`Aq   0000d506e322e8c1683b8ed7ee033009eb4990587953d3ed5e89faff986c602a</p>

<p>shuai.wu0003meMB   00003247d5bfb5de59051066288c22b8c4e272525118a72b2502befa446305fe</p>

<p>shuai.wu0000mEVZ   0000138ae7d5056e7655ee548376b09225cc9ee065d3b894f611c4093f11521d</p>

<p>shuai.wu0002keVX   0000854ed16161e480022e136b5762d2b07ffc3b5fd58c659d7f542864113c6c</p>

<p>shuai.wu0001lMLc   00005b82184c7c78b69a6d117f28330678b41b011d8c45be827495e73d63c9f6</p>

<p>shuai.wu0004mXOf   0000d2b289a9871d83c72087ce41ad0665f9cdc0dedbb72035bad04dcbd0d25e</p>

<p>shuai.wu0003nLcH   00004dc798e5aad47fd8f7bc5b55cf3afc86d33be112fce86846bd5bb8aee2ae</p>

<p>shuai.wu0002kySJ   0000970c48ae641e7d7227d9e7ecbd07a1ade2c4eaa8af32401886562e16f1e9</p>

<p>shuai.wu0004m]jq   0000113ba98a61e0f1aa0a6a3adeeee60edaef2ad5b75901d5e62cac60bfb682</p></blockquote>

<p>after calculation of 30 seconds with 5  machines I have found 689 bit coins starting with 4 0s</p>

<p>I only listed part of the results. in each machine, I opened 5 clients, so the server reports that there are 5 machines calculating.</p>

<h3>3. Report of CPU usage.</h3>

<blockquote><p>The result of running &ldquo;java -jar bitcoinServer.jar 5 30&rdquo;:</p>

<p>shuai.wu0001teLs   00000210852214f5d45c4af4e2ad58456a36ae03f73f11a0265754a2b6dd14de</p>

<p>shuai.wu0004tG<sup>Z</sup>   000003f139fb018b5490211c66cf10a590c5492a83f725f45117026e2ef150ac</p>

<p>shuai.wu0000t\mh   00000f28adc1eff81a44b99da36306c0e65e8127bf5406c6705d3d536b4f0738</p>

<p>shuai.wu0001vliq   0000095c5b2caa3021d28005f2f0c76604e19bd80ed01550a2505ffc141b212f</p>

<p>shuai.wu0000w]Dx   0000070993b183332e44b6153e3d77308cbca061e9100b09099f135bce56553b</p>

<p>shuai.wu0003yDiP   0000039cda63bcfcd412f4989f6088e9769c309e291c56cb1d8cb3bb55997ae2</p>

<p>shuai.wu0001zdiE   00000e766c69d338a1512c467838e60412b67f29f651676923df27a0e2fe8ab1</p>

<p>shuai.wu0001zvwb   00000cd6a078cb9c6dea36ecaba9b867f1653eb9719e2c006dd750911873cf17</p>

<p>shuai.wu0001AAMWh  00000cb096330559ae71684257e673731da5905d8d67e02bba93d744749ee924</p></blockquote>

<p>after calculation of 30 seconds with 5  machines I have found 61 bit coins starting with 5 0s</p>

<p>In my laptop , the cpu has 4 cores, when running the server program, the cpu utilization is around 390%. When running on the server, the cpu utilization is about 500%, and the running time is merely 5 times the real time:</p>

<p>  PID USER         PR       NI        VIRT         RES         SHR S        %CPU     %MEM              TIME+ COMMAND</p>

<p>20911 shuai        20        0      11.669g      2.613g      13008 S         496.7    8.3               2:40.47 java</p>

<p>20866 shuai     20   0   21060   1768   1092 R   0.7  0.0   0:01.00 top</p>

<h3>4.</h3>

<p>I used 6 machines to try to find a coin with a long prefix strings of 0. They are:
lin116-07,08,09,13,14,15</p>

<p>The most zeros I can find within 5 minutes is 7. Within 5 minutes, I found such coins.
The result:</p>

<p>shuai.wu0001ebbe    0000000378d687ca87089b780fe5e3a9c4699dea21ecd60b7ac793d0bfac4566</p>

<p>shuai.wu0013OCQ^    0000000295e75715d34a957cbc209fa5facf3ff76569566f514b7ebc68242835</p>

<p>shuai.wu0025KX_w    0000000f8b73d482a41e980bfd672e41a3c33c4f91db069faf50445fb454bd4e</p>

<p>shuai.wu0017AEQFK   0000000d12c98d784c3ebe5262ba97b4132eec121519951b17cab1fbe140a557</p>

<p>shuai.wu0021AVqep   00000004d0eedccf98e072261a14d2386231936f92643499b79a9efa0ba9850c</p>

<p>shuai.wu0004CmVCQ   0000000b26bc90d31d9aa186810e3e2f26b2516535f3d2970613d5e8e26cdc7b</p>

<p>shuai.wu0023BWSJJ   0000000d4c7cf4a81e9edf7ee6c39ab74db7c59eb3582e16431b8f58901550a3</p>

<p>shuai.wu0017Cv^[z   00000006f09e96927211556db062e3df4f196ceb26e16486bcd6849f1583de2b</p>

<p>shuai.wu0004EdnWh   000000049b87b0091d0eb6048f7335db64c7a477e344c7a202be35f797286452</p>

<p>shuai.wu0004ElWz_   0000000fd5a451463cfae333fbd641f20a3bf70c8febbd7557506220a54ac0c6</p>

<p>shuai.wu0005EjM\A   0000000aa51803505550e372a9ffeeae882764e14f5f2b5bd0f749f5ba66db1e</p>

<p>shuai.wu0006FsuIl   0000000408eb7319ca2ea457b9273e3e29f9eaccb954fb1beed3efa586b4b4f6</p>

<p>shuai.wu0000Hrm\N   000000079e69d40def7ada8483d24890b2ba8241f3e7ee83476d1e1478cdd1e0</p>

<p>shuai.wu0005Gzd]V   00000001b95ae9650d4840555b6229668da081cc7f5b910745ae777cbee3d39a</p>

<p>shuai.wu0018Gc<sup>TA</sup>   00000003d3ef1f2468464170c8023cef754b334946d32f7d7714bc7de1ade7be</p>

<p>shuai.wu0020GzuTr   0000000c4c432226a71968c6651bd6ee9cf921683020c93640ef58de22e31d8e</p>

<p>shuai.wu0007IbUYI   000000054d86a1b657c8c7983f52084dbca1b107e1e5ef0d3f19870f27051387</p>

<p>shuai.wu0004K_iQX   0000000b0cc8864af68ec334419558af150eb9da99b1bdfd88ddd15fca17138f</p>

<p>shuai.wu0006JPTHs   0000000801d64a9d7c4ae5ec0e7096a5a814d3aa2e64861fbeff001787b7aeb8</p>

<p>shuai.wu0004KuyF^   0000000b2d26d3585a043d20070f1e190598054d5229e4789380bd968cd06b98</p>

<p>after calculation of 300 seconds with 30  machines I have found 20 bit coins starting with 7 0s</p>

<h3>5.</h3>

<p>The server has 100,00 different prefix string(from 0000 to 9999) to assign to clients.</p>

<p>Theoretically，there are at most 10000/5 = 2000 clients that can connect to server if the server is fast enough.</p>

<p>However, it&rsquo;s impossible for me to test my code on 2000 machines. As mentioned above, I tested my code within 6 machines, they both worked well.</p>
]]></content>
  </entry>
  
</feed>
